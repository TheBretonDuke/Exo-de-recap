import subprocess
import sys
import ipywidgets as widgets
import pandas as pd
import numpy as np
import sqlite3
import os
import random
from datetime import datetime, timedelta
from IPython.display import HTML, display
from IPython import get_ipython

def install_sqlite_packages():
    """Installe les packages n√©cessaires pour le notebook SQLite."""
    packages = [
        "pandas>=1.5.0",
        "numpy>=1.20.0", 
        "ipywidgets>=7.6.0",
        "matplotlib>=3.5.0"
    ]
    
    print("üöÄ D√©marrage de l'installation des packages SQLite...")
    print("üìù Note: SQLite est inclus dans Python, aucune installation suppl√©mentaire n√©cessaire")
    
    for package in packages:
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", package, "--quiet"])
            print(f"‚úÖ {package} install√©.")
        except subprocess.CalledProcessError:
            print(f"‚ùå Erreur lors de l'installation de {package}.")
            
    print("\\n‚ú® Installation termin√©e !")

class SQLiteHelper:
    def __init__(self):
        self.success_style = """
        <div style="background: linear-gradient(90deg, #2196F3, #0D47A1); color: white; padding: 15px; border-radius: 10px; margin: 10px 0; text-align: center; font-weight: bold; font-size: 16px;">
            üóÑÔ∏è {message} üóÑÔ∏è
        </div>
        """
        self.db_name = "entreprise.db"
        
        # Base de donn√©es des aides cach√©es
        self.helps = {
            "4.1.1": {
                "hint": "Utilisez sqlite3.connect('nom_db.db') pour cr√©er la connexion. N'oubliez pas le .close()",
                "solution": """# Cr√©er une connexion √† la base de donn√©es
conn = sqlite3.connect('entreprise.db')
cursor = conn.cursor()

print("‚úÖ Connexion √† la base de donn√©es √©tablie")
print(f"üìÅ Fichier de base de donn√©es: {os.path.abspath('entreprise.db')}")

# N'oubliez pas de fermer la connexion √† la fin
# conn.close()""",
                "explanation": "sqlite3.connect() cr√©e une connexion √† une base SQLite. Si le fichier n'existe pas, il sera cr√©√©."
            },
            "4.1.2": {
                "hint": "Utilisez CREATE TABLE avec les colonnes et leurs types (INTEGER, TEXT, REAL). PRIMARY KEY pour l'ID.",
                "solution": """# Cr√©er la table employes
cursor.execute('''
    CREATE TABLE IF NOT EXISTS employes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nom TEXT NOT NULL,
        departement TEXT NOT NULL,
        salaire REAL NOT NULL,
        date_embauche DATE
    )
''')

# Valider les changements
conn.commit()
print("‚úÖ Table 'employes' cr√©√©e avec succ√®s")""",
                "explanation": "CREATE TABLE d√©finit la structure. IF NOT EXISTS √©vite les erreurs si la table existe d√©j√†."
            },
            "4.2.1": {
                "hint": "Utilisez INSERT INTO table (colonnes) VALUES (valeurs). Plusieurs fa√ßons: une ligne ou plusieurs.",
                "solution": """# Ins√©rer des donn√©es d'exemple
employes_data = [
    ('Alice Martin', 'IT', 45000, '2023-01-15'),
    ('Bob Dupont', 'RH', 38000, '2022-11-03'),
    ('Charlie Dubois', 'Finance', 52000, '2023-03-20'),
    ('Diana Moreau', 'Marketing', 41000, '2022-09-12'),
    ('Eve Laurent', 'IT', 48000, '2023-02-08')
]

cursor.executemany('''
    INSERT INTO employes (nom, departement, salaire, date_embauche)
    VALUES (?, ?, ?, ?)
''', employes_data)

conn.commit()
print(f"‚úÖ {len(employes_data)} employ√©s ajout√©s √† la base de donn√©es")""",
                "explanation": "INSERT INTO ajoute des donn√©es. executemany() permet d'ins√©rer plusieurs lignes efficacement."
            },
            "4.2.2": {
                "hint": "Utilisez SELECT avec WHERE pour filtrer. Exemples: WHERE salaire > 40000, WHERE departement = 'IT'",
                "solution": """# Diff√©rentes requ√™tes SELECT
print("üë• TOUS LES EMPLOY√âS:")
cursor.execute("SELECT * FROM employes")
tous_employes = cursor.fetchall()
for emp in tous_employes:
    print(f"  {emp}")

print("\\nüí∞ EMPLOY√âS BIEN PAY√âS (> 45000):")
cursor.execute("SELECT nom, salaire FROM employes WHERE salaire > 45000")
bien_payes = cursor.fetchall()
for emp in bien_payes:
    print(f"  {emp[0]}: {emp[1]}‚Ç¨")

print("\\nüíª EMPLOY√âS IT:")
cursor.execute("SELECT nom, salaire FROM employes WHERE departement = 'IT'")
it_employes = cursor.fetchall()
for emp in it_employes:
    print(f"  {emp[0]}: {emp[1]}‚Ç¨")""",
                "explanation": "SELECT r√©cup√®re les donn√©es. WHERE filtre selon des conditions. fetchall() r√©cup√®re tous les r√©sultats."
            },
            "4.3.1": {
                "hint": "Utilisez UPDATE SET colonne = valeur WHERE condition. N'oubliez pas le WHERE !",
                "solution": """# Augmenter les salaires du d√©partement IT de 5%
cursor.execute('''
    UPDATE employes 
    SET salaire = salaire * 1.05 
    WHERE departement = 'IT'
''')

rows_affected = cursor.rowcount
conn.commit()

print(f"‚úÖ {rows_affected} salaires augment√©s de 5% dans le d√©partement IT")

# V√©rifier les changements
cursor.execute("SELECT nom, salaire FROM employes WHERE departement = 'IT'")
nouveaux_salaires = cursor.fetchall()
print("\\nüíª Nouveaux salaires IT:")
for emp in nouveaux_salaires:
    print(f"  {emp[0]}: {emp[1]:.2f}‚Ç¨")""",
                "explanation": "UPDATE modifie les donn√©es existantes. rowcount indique combien de lignes ont √©t√© affect√©es."
            },
            "4.3.2": {
                "hint": "Utilisez DELETE FROM table WHERE condition. Attention: sans WHERE, toutes les lignes sont supprim√©es !",
                "solution": """# Supprimer les employ√©s avec un salaire < 40000
cursor.execute("DELETE FROM employes WHERE salaire < 40000")
rows_deleted = cursor.rowcount
conn.commit()

print(f"‚ùå {rows_deleted} employ√©s supprim√©s (salaire < 40000‚Ç¨)")

# Voir les employ√©s restants
cursor.execute("SELECT COUNT(*) FROM employes")
count = cursor.fetchone()[0]
print(f"üë• {count} employ√©s restants dans la base")""",
                "explanation": "DELETE supprime des lignes selon une condition. Toujours utiliser WHERE pour √©viter de vider la table."
            },
            "4.4.1": {
                "hint": "Cr√©ez des index avec CREATE INDEX nom_index ON table(colonne). IF NOT EXISTS √©vite les erreurs. EXPLAIN QUERY PLAN montre l'utilisation des index.",
                "solution": """# Cr√©er des index pour optimiser les performances
cursor = conn.cursor()

# 1. Index sur d√©partement (requ√™tes fr√©quentes)
cursor.execute("CREATE INDEX IF NOT EXISTS idx_departement ON employes(departement)")

# 2. Index sur salaire (tri et filtres)
cursor.execute("CREATE INDEX IF NOT EXISTS idx_salaire ON employes(salaire)")

# 3. Index composite nom/prenom (recherches nominatives)
cursor.execute("CREATE INDEX IF NOT EXISTS idx_nom_prenom ON employes(nom, prenom)")

conn.commit()

# Test de performance - voir l'utilisation des index
cursor.execute("EXPLAIN QUERY PLAN SELECT * FROM employes WHERE departement = 'IT'")
plan = cursor.fetchall()
print("üìä Plan d'ex√©cution (avec index):")
for step in plan:
    print(f"  {step[3]}")

print("\n‚úÖ Index cr√©√©s et performance optimis√©e")
print("üîí N'oubliez pas: conn.close() pour fermer la connexion")""",
                "explanation": "Les index acc√©l√®rent les recherches WHERE, ORDER BY et JOIN. Les index compos√©s optimisent les requ√™tes multi-colonnes."
            }
        }
    
    def help(self, step):
        """Affiche l'aide pour une √©tape donn√©e"""
        if step not in self.helps:
            print(f"‚ùå Aide non trouv√©e pour l'√©tape {step}")
            return
            
        help_data = self.helps[step]
        
        # Conseil cach√©
        html_hint = f"""
        <details style="margin: 10px 0; border: 1px solid #ddd; border-radius: 5px; padding: 5px; background: #f9f9f9;">
            <summary style="cursor: pointer; background: #e3f2fd; padding: 10px; border-radius: 3px; font-weight: bold; color: #1976d2;">
                üí° Conseil SQL (cliquer pour d√©rouler)
            </summary>
            <div style="padding: 15px; margin-top: 10px; background: white; border-radius: 3px;">
                <p style="margin: 0; color: #333;">{help_data['hint']}</p>
            </div>
        </details>
        """
        
        # Solution cach√©e
        html_solution = f"""
        <details style="margin: 10px 0; border: 1px solid #ddd; border-radius: 5px; padding: 5px; background: #f9f9f9;">
            <summary style="cursor: pointer; background: #e8f5e8; padding: 10px; border-radius: 3px; font-weight: bold; color: #2e7d32;">
                üîç Solution SQL (cliquer pour d√©rouler)
            </summary>
            <div style="padding: 15px; margin-top: 10px; background: white; border-radius: 3px;">
                <p><strong>üóÑÔ∏è Explication :</strong> {help_data['explanation']}</p>
                <pre style="background: #f5f5f5; padding: 10px; border-radius: 3px; overflow-x: auto; border-left: 3px solid #2196f3;"><code>{help_data['solution']}</code></pre>
            </div>
        </details>
        """
        
        display(HTML(html_hint))
        display(HTML(html_solution))
    
    def solution(self, code, explanation=""):
        html = f"""
        <details style="margin: 10px 0; border: 1px solid #ddd; border-radius: 5px; padding: 5px;">
            <summary style="cursor: pointer; background: #e3f2fd; padding: 10px; border-radius: 3px; font-weight: bold;">
                üîç Solution SQL (cliquer pour r√©v√©ler)
            </summary>
            <div style="background: #fafafa; padding: 15px; margin-top: 10px; border-radius: 3px;">
                {f'<p><strong>üóÑÔ∏è Explication SQL:</strong> {explanation}</p>' if explanation else ''}
                <pre style="background: #f8f8f8; padding: 10px; border-radius: 3px; overflow-x: auto;"><code>{code}</code></pre>
            </div>
        </details>
        """
        display(HTML(html))
    
    def hint(self, text):
        html = f"""
        <details style="margin: 10px 0; border: 1px solid #ddd; border-radius: 5px; padding: 5px;">
            <summary style="cursor: pointer; background: #e3f2fd; padding: 10px; border-radius: 3px; font-weight: bold;">
                üí° Conseil SQL (cliquer pour r√©v√©ler)
            </summary>
            <div style="background: #f3f9ff; padding: 15px; margin-top: 10px; border-radius: 3px;">
                {text}
            </div>
        </details>
        """
        display(HTML(html))
    
    def success(self, message):
        html = self.success_style.format(message=message)
        display(HTML(html))
        
    def check_db_connection(self):
        """V√©rifie la connexion √† la base de donn√©es"""
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            conn.close()
            return True, [table[0] for table in tables]
        except Exception as e:
            return False, str(e)
    
    def check_table_exists(self, table_name):
        """V√©rifie si une table existe"""
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?;", (table_name,))
            result = cursor.fetchone()
            conn.close()
            return result is not None
        except Exception:
            return False
    
    def check_connection_button(self):
        """Bouton pour v√©rifier la connexion √† la base"""
        output = widgets.Output()
        button = widgets.Button(
            description="üîó V√©rifier Connexion",
            button_style='info',
            layout=widgets.Layout(width='200px', height='35px')
        )
        
        def on_click(b):
            with output:
                output.clear_output()
                success, result = self.check_db_connection()
                if success:
                    print("‚úÖ Connexion r√©ussie √† la base de donn√©es")
                    print(f"üìÅ Base: {self.db_name}")
                    if result:
                        print(f"üìã Tables: {', '.join(result)}")
                    else:
                        print("üìã Aucune table trouv√©e")
                else:
                    print(f"‚ùå Erreur de connexion: {result}")
        
        button.on_click(on_click)
        display(widgets.VBox([button, output]))
    
    def check_table_button(self, table_name):
        """Bouton pour v√©rifier l'existence d'une table"""
        output = widgets.Output()
        button = widgets.Button(
            description=f"üìã V√©rifier {table_name}",
            button_style='warning',
            layout=widgets.Layout(width='200px', height='35px')
        )
        
        def on_click(b):
            with output:
                output.clear_output()
                if self.check_table_exists(table_name):
                    print(f"‚úÖ Table '{table_name}' existe")
                    
                    # Compter les enregistrements
                    try:
                        conn = sqlite3.connect(self.db_name)
                        cursor = conn.cursor()
                        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                        count = cursor.fetchone()[0]
                        print(f"üìä {count} enregistrements")
                        
                        # Montrer la structure
                        cursor.execute(f"PRAGMA table_info({table_name})")
                        columns = cursor.fetchall()
                        print("üèóÔ∏è Structure:")
                        for col in columns:
                            print(f"  - {col[1]} ({col[2]})")
                        conn.close()
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erreur lors de la v√©rification: {e}")
                else:
                    print(f"‚ùå Table '{table_name}' n'existe pas")
        
        button.on_click(on_click)
        display(widgets.VBox([button, output]))

def load_sqlite_helper():
    """Charge le syst√®me d'aide SQLite."""
    if 'sqlite_helper' not in get_ipython().user_ns:
        helper = SQLiteHelper()
        get_ipython().user_ns['sqlite_helper'] = helper
        print("üóÑÔ∏è Syst√®me d'aide SQLite charg√© !")
        print("‚ú® Pr√™t pour les bases de donn√©es relationnelles !")
    else:
        print("‚úÖ Le syst√®me d'aide SQLite est d√©j√† charg√©.")